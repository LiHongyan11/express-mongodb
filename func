// 冒泡排序
function bubbleSort(arr) {
    var i = arr.length, j;
    var tempExchangVal;
    while (i > 0) {
        for (j = 0; j < i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                tempExchangVal = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tempExchangVal;
            }
        }
        i--;
    }
    return arr;
}
 
var arr = [3, 2, 4, 9, 1, 5, 7, 6, 8];
var arrSorted = bubbleSort(arr);
console.log(arrSorted);

// 快速排序（平均运行时间为θ(nlogn)）
function quickSort(array){
    function sort(prev, numsize){
        var nonius = prev;
        var j = numsize -1;
        var flag = array[prev];
        if ((numsize - prev) > 1) {
            while(nonius < j){
                for(; nonius < j; j--){
                    if (array[j] < flag) {
                        array[nonius++] = array[j];　//a[i] = a[j]; i += 1;
                        break;
                    };
                }
                for( ; nonius < j; nonius++){
                    if (array[nonius] > flag){
                        array[j--] = array[nonius];
                        break;
                    }
                }
            }
            array[nonius] = flag;
            sort(0, nonius);
            sort(nonius + 1, numsize);
        }           
    }
    sort(0, array.length);
    return array;
}

function quickSort(arr, start, end) {
	if (start >= end) return;
	var i = start, j = end, flag = arr[start];
	while(i !== j) {
		while(arr[j] >= flag && i < j) j--;
		while(arr[i] <= flag && i < j) i++;
		
		if (i < j) {
			var temp = arr[i];
			arr[i] = arr[j];
			arr[j] = temp;
		}
	}
	
	arr[start] = arr[i];
	arr[i] = flag

	sort2(arr, start, i - 1)
	sort2(arr, i + 1, end)
}

// 归并排序（时间复杂度为O(nlogn)）
function　merge(left, right){
    var　result=[];
    while(left.length>0 && right.length>0){
        if(left[0]<right[0]){
        /*shift()方法用于把数组的第一个元素从其中删除，并返回第一个元素的值。*/
            result.push(left.shift());
        }else{
            result.push(right.shift());
        }
    }
    return　result.concat(left).concat(right);
}
function　mergeSort(items){
    if(items.length == 1){
        return　items;
    }
    var　middle = Math.floor(items.length/2),
        left = items.slice(0, middle),
        right = items.slice(middle);
        return　merge(mergeSort(left), mergeSort(right));
}

// 快速排序
function quickSort(arr){
    //如果数组<=1,则直接返回
    if(arr.length<=1){return arr;}
    var pivotIndex=Math.floor(arr.length/2);
    //找基准，并把基准从原数组删除
    var pivot=arr.splice(pivotIndex,1)[0];
    //定义左右数组
    var left=[];
    var right=[];

    //比基准小的放在left，比基准大的放在right
    for(var i=0;i<arr.length;i++){
        if(arr[i]<=pivot){
            left.push(arr[i]);
        }
        else{
            right.push(arr[i]);
        }
    }
    //递归
    return quickSort(left).concat([pivot],quickSort(right));
}
var arr = [3, 2, 4, 9, 1, 5, 7, 6, 8];
console.log(quickSort(arr))


// 快速排序
function quick_sort(list, start, end) {  
    if (start < end) {  
        var pivotpos = partition(list, start, end);   //找出快排的基数  
        quick_sort(list, start, pivotpos - 1);        //将左边的快排一次  
        quick_sort(list, pivotpos + 1, end);          //将右边的快排一次  
        return list;
    }  
}     
    
//将一个序列调整成以基数为分割的两个区域，一边全都不小于基数，一边全都不大于基数  
function partition(list, start, end) {  
    var pivotpos = start;  
    var pivot = list[start];  
    var tmp;  
    for(var i = start + 1; i <= end; i ++) {  
        if (list[i] < pivot) {  
            tmp = list[i];  
            pivotpos += 1;  
            list[i] = list[pivotpos];  
            list[pivotpos] = tmp;  
        }  
    }  
    
    tmp = list[start];  
    list[start] = list[pivotpos];  
    list[pivotpos] = tmp;  
    return pivotpos;  
}  
    
    
var list = [8,2,4,65,2,4,7,1,9,0,2,34,12];  
    
quick_sort(list, 0, list.length);


// 选择排序
function sorrt(ary) {
    length = ary.length;
    for (var i = 0; i < length; i++) {
        _min = ary[i]
        k = i
        for (var j = i + 1; j < length; j++) {
            if (_min > ary[j]) {
                _min = ary[j]
                k = j
            }
        }
        ary[k] = ary[i]
        ary[i] = _min
    }
    return ary;
}

// 螺旋遍历矩阵
var arr = [
    [1,2,3,4,17],
    [12,13,14,5,18],
    [11,16,15,6,19],
    [10,9,8,7,20]
]
function luoXuanBianLi(arr) {
    var left = 0, right = arr[0].length -1, up = 0, down = arr.length -1;
    var num = 0, count = arr.length * arr[0].length;
    
    while(num < count) {
        for (i = left; i <= right; i++) {
            console.log(arr[up][i]);
            num ++;
        }
        up ++;
        for (i = up; i <= down; i++) {
            console.log(arr[i][right]);
            num ++;
        }
        right --;
        for (i = right; i >= left; i --) {
            console.log(arr[down][i]);
            num ++;
        }
        down --;
        for(i = down; i >= up; i --) {
            console.log(arr[i][left]);
            num ++;
        }
        left ++;
    }
}
luoXuanBianLi(arr);

// 两个固定长度的有序数组，合成一个有序数组（最优解法，一层循环）

function mergeSort() {

    var arr1 = [1,5,6,9], arr2 = [2,3,4,8];
    var arr = [];
    for (var i=0,j =0; i< arr1.length, j<arr2.length;) {
        if (arr1[i] > arr2[j]) {
            arr.push(arr2[j]);
            j++;
        } else {
            arr.push(arr1[i]);
            i++;
        }
    }
    return arr;
}
mergeSort()


var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
    return target;
};
